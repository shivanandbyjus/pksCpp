// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <RcppEigen.h>
#include <Rcpp.h>

using namespace Rcpp;

// emBLIMcpp
Rcpp::List emBLIMcpp(const Eigen::Map < Eigen::MatrixXd > R, const Eigen::Map < Eigen::MatrixXd > W, const Eigen::Map < Eigen::MatrixXd > K, const Eigen::Map < Eigen::VectorXd > NR, const Eigen::Map < Eigen::VectorXd > PKr, const Eigen::Map < Eigen::VectorXd > betar, const Eigen::Map < Eigen::VectorXd > etar, const int maxiter, const double tol, const bool fdb);
RcppExport SEXP _pksCpp_emBLIMcpp(SEXP RSEXP, SEXP WSEXP, SEXP KSEXP, SEXP NRSEXP, SEXP PKrSEXP, SEXP betarSEXP, SEXP etarSEXP, SEXP maxiterSEXP, SEXP tolSEXP, SEXP fdbSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const Eigen::Map < Eigen::MatrixXd > >::type R(RSEXP);
    Rcpp::traits::input_parameter< const Eigen::Map < Eigen::MatrixXd > >::type W(WSEXP);
    Rcpp::traits::input_parameter< const Eigen::Map < Eigen::MatrixXd > >::type K(KSEXP);
    Rcpp::traits::input_parameter< const Eigen::Map < Eigen::VectorXd > >::type NR(NRSEXP);
    Rcpp::traits::input_parameter< const Eigen::Map < Eigen::VectorXd > >::type PKr(PKrSEXP);
    Rcpp::traits::input_parameter< const Eigen::Map < Eigen::VectorXd > >::type betar(betarSEXP);
    Rcpp::traits::input_parameter< const Eigen::Map < Eigen::VectorXd > >::type etar(etarSEXP);
    Rcpp::traits::input_parameter< const int >::type maxiter(maxiterSEXP);
    Rcpp::traits::input_parameter< const double >::type tol(tolSEXP);
    Rcpp::traits::input_parameter< const bool >::type fdb(fdbSEXP);
    rcpp_result_gen = Rcpp::wrap(emBLIMcpp(R, W, K, NR, PKr, betar, etar, maxiter, tol, fdb));
    return rcpp_result_gen;
END_RCPP
}
// emGLIMcpp
Rcpp::List emGLIMcpp(const Eigen::Map < Eigen::MatrixXd > weights, const Eigen::Map < Eigen::MatrixXd > R, const Eigen::Map < Eigen::MatrixXd > W, const Eigen::Map < Eigen::MatrixXd > K, const Eigen::Map < Eigen::VectorXd > NRr, const Eigen::Map < Eigen::VectorXd > PKr, const Eigen::Map < Eigen::VectorXd > betar, const Eigen::Map < Eigen::VectorXd > etar, const int maxiter, const double tol, const bool fdb);
RcppExport SEXP _pksCpp_emGLIMcpp(SEXP weightsSEXP, SEXP RSEXP, SEXP WSEXP, SEXP KSEXP, SEXP NRrSEXP, SEXP PKrSEXP, SEXP betarSEXP, SEXP etarSEXP, SEXP maxiterSEXP, SEXP tolSEXP, SEXP fdbSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const Eigen::Map < Eigen::MatrixXd > >::type weights(weightsSEXP);
    Rcpp::traits::input_parameter< const Eigen::Map < Eigen::MatrixXd > >::type R(RSEXP);
    Rcpp::traits::input_parameter< const Eigen::Map < Eigen::MatrixXd > >::type W(WSEXP);
    Rcpp::traits::input_parameter< const Eigen::Map < Eigen::MatrixXd > >::type K(KSEXP);
    Rcpp::traits::input_parameter< const Eigen::Map < Eigen::VectorXd > >::type NRr(NRrSEXP);
    Rcpp::traits::input_parameter< const Eigen::Map < Eigen::VectorXd > >::type PKr(PKrSEXP);
    Rcpp::traits::input_parameter< const Eigen::Map < Eigen::VectorXd > >::type betar(betarSEXP);
    Rcpp::traits::input_parameter< const Eigen::Map < Eigen::VectorXd > >::type etar(etarSEXP);
    Rcpp::traits::input_parameter< const int >::type maxiter(maxiterSEXP);
    Rcpp::traits::input_parameter< const double >::type tol(tolSEXP);
    Rcpp::traits::input_parameter< const bool >::type fdb(fdbSEXP);
    rcpp_result_gen = Rcpp::wrap(emGLIMcpp(weights, R, W, K, NRr, PKr, betar, etar, maxiter, tol, fdb));
    return rcpp_result_gen;
END_RCPP
}

static const R_CallMethodDef CallEntries[] = {
    {"_pksCpp_emBLIMcpp", (DL_FUNC) &_pksCpp_emBLIMcpp, 10},
    {"_pksCpp_emGLIMcpp", (DL_FUNC) &_pksCpp_emGLIMcpp, 11},
    {NULL, NULL, 0}
};

RcppExport void R_init_pksCpp(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
